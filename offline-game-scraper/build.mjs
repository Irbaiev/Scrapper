// node build.mjs
import { execSync } from 'node:child_process';
import fs from 'fs'; 
import path from 'path';

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö –∏–≥—Ä —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
const gameName = process.argv[2] || 'default-game';
const dist = `dist/${gameName}`;

if (!fs.existsSync(dist)) {
  console.error(`‚ùå dist –Ω–µ –Ω–∞–π–¥–µ–Ω: ${dist}`);
  console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:');
  const distDir = path.dirname(dist);
  if (fs.existsSync(distDir)) {
    const games = fs.readdirSync(distDir).filter(d => fs.statSync(path.join(distDir, d)).isDirectory());
    games.forEach(g => console.log(`  - ${g}`));
  }
  process.exit(1);
}

console.log(`üéÆ –°–±–æ—Ä–∫–∞ –∏–≥—Ä—ã: ${gameName}`);
console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dist}`);

console.log('1) scaffold configs');
execSync(`node tools/scaffold-configs.cjs --dist ${dist}`, { stdio:'inherit' });

console.log('2) preflight (rewrite externals, publicPath, inject gameParam)');
execSync(`node tools/preflight.cjs --dist ${dist}`, { stdio:'inherit' });

console.log('3) –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è launch-–æ–±—ë—Ä—Ç–æ–∫ –∏ —Ñ–∏–∫—Å–æ–≤');
ensureLaunchRedirects(dist, gameName);

console.log('4) –≥–æ—Ç–æ–≤–æ. –ö–ª–∞–¥–∏ —Å–≤–æ–π sw.js (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –ª–µ–∂–∏—Ç) –∏ –∑–∞–ø—É—Å–∫–∞–π —Å–µ—Ä–≤–µ—Ä.');

// –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è launch-–æ–±—ë—Ä—Ç–∫–∏ —Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º –∏ query
function ensureLaunchRedirect({dist, launchName, targetHtml, query}) {
  const fs = require('fs'), p = require('path');
  const f = p.join(dist, launchName);
  const q = query ? (query.startsWith('?') ? query : '?' + query) : '';
  const html = `<!doctype html><meta charset="utf-8">
<script>location.replace("./${targetHtml}${q}")</script>`;
  if (!fs.existsSync(f)) fs.writeFileSync(f, html);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω launch-—Ä–µ–¥–∏—Ä–µ–∫—Ç: ${launchName} -> ${targetHtml}${q}`);
}

function ensureLaunchRedirects(distPath, gameName) {
  const fs = require('fs'), p = require('path');
  
  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä
  const mirrorIndex = p.join(distPath, 'mirrorIndex.json');
  if (!fs.existsSync(mirrorIndex)) {
    console.log('‚ö†Ô∏è  mirrorIndex.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
  
  const mocksDir = p.join(distPath, 'mocks');
  if (!fs.existsSync(mocksDir)) {
    console.log('‚ö†Ô∏è  mocks –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—ë–º');
    fs.mkdirSync(mocksDir, { recursive: true });
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ WS –º–æ–∫–æ–≤
  const wsDir = p.join(distPath, 'mocks', 'ws');
  if (!fs.existsSync(wsDir)) {
    console.log('‚ö†Ô∏è  WS –º–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é');
    fs.mkdirSync(wsDir, { recursive: true });
  }
  
  // –ò—â–µ–º launch —Ñ–∞–π–ª—ã –∏ —Å–æ–∑–¥–∞—ë–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
  const htmlFiles = fs.readdirSync(distPath).filter(f => f.endsWith('.html'));
  const launchFiles = htmlFiles.filter(f => f.includes('launch'));
  const indexFiles = htmlFiles.filter(f => f.includes('index') || f.includes('main'));
  
  if (launchFiles.length > 0 && indexFiles.length > 0) {
    const launchFile = launchFiles[0];
    const targetFile = indexFiles[0];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç (–µ—Å–ª–∏ launch —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç)
    const launchPath = p.join(distPath, launchFile);
    const launchContent = fs.readFileSync(launchPath, 'utf8');
    
    if (launchContent.length < 1000 && !launchContent.includes('location.replace')) {
      console.log(`üîÑ –°–æ–∑–¥–∞—ë–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –¥–ª—è ${launchFile} -> ${targetFile}`);
      ensureLaunchRedirect({
        dist: distPath,
        launchName: launchFile,
        targetHtml: targetFile,
        query: `game=${gameName.replace('-offline', '')}&locale=en`
      });
    }
  }
  
  // –°–æ–∑–¥–∞—ë–º fallback WS —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω–µ—Ç ndjson —Ñ–∞–π–ª–æ–≤
  const wsFiles = fs.readdirSync(wsDir).filter(f => f.endsWith('.ndjson'));
  if (wsFiles.length === 0) {
    console.log('‚ö†Ô∏è  WS ndjson —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞—ë–º –∑–∞–≥–ª—É—à–∫—É');
    const fallbackWs = [
      JSON.stringify({type:'ServerTime', data:{ts:Date.now()}}),
      JSON.stringify({type:'GameState', data:{status:'IDLE', balance:100000}}),
      JSON.stringify({type:'RoundStart', data:{roundId:'offline-'+Date.now(), seed:'offline'}}),
      JSON.stringify({type:'Tick', data:{t:0, m:1.00}}),
      JSON.stringify({type:'Crash', data:{m:1.23}})
    ].join('\n');
    const fallbackFile = p.join(wsDir, 'fallback.ndjson');
    fs.writeFileSync(fallbackFile, fallbackWs);
  }
}
