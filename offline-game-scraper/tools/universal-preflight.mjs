#!/usr/bin/env node
/**
 * Universal Pre-flight Checklist
 * 
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –ª—é–±—ã—Ö –∏–≥—Ä:
 * - –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è launch-—Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ —Å query
 * - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ WS –º–æ–∫–æ–≤
 * - –ò–Ω–∂–µ–∫—Ü–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —à–∏–º–æ–≤ –∏ –ø–∞—Ç—á–µ–π
 * - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
 * - –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
 */

import { execSync } from 'node:child_process';
import fs from 'fs';
import path from 'path';
import crypto from 'crypto';

// –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–≥—Ä—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
const gameName = process.argv[2];
if (!gameName) {
  console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏–≥—Ä—ã: node tools/universal-preflight.mjs <game-name>');
  console.log('–ü—Ä–∏–º–µ—Ä: node tools/universal-preflight.mjs paper-plane-offline');
  process.exit(1);
}

const DIST_PATH = `dist/${gameName}`;

console.log('üöÄ Universal Pre-flight Checklist');
console.log('==================================');
console.log(`üéÆ –ò–≥—Ä–∞: ${gameName}`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ dist
if (!fs.existsSync(DIST_PATH)) {
  console.error(`‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${DIST_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!`);
  console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:');
  const distDir = path.dirname(DIST_PATH);
  if (fs.existsSync(distDir)) {
    const games = fs.readdirSync(distDir).filter(d => fs.statSync(path.join(distDir, d)).isDirectory());
    games.forEach(g => console.log(`  - ${g}`));
  }
  process.exit(1);
}

console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∏–≥—Ä–∞: ${gameName}`);
console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${DIST_PATH}`);

// 1. –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è launch-–æ–±—ë—Ä—Ç–∫–∏
console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ launch-—Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤...');
function ensureLaunchRedirect({dist, launchName, targetHtml, query}) {
  const f = path.join(dist, launchName);
  const q = query ? (query.startsWith('?') ? query : '?' + query) : '';
  const html = `<!doctype html><meta charset="utf-8">
<script>location.replace("./${targetHtml}${q}")</script>`;
  
  if (!fs.existsSync(f)) {
    fs.writeFileSync(f, html);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω launch-—Ä–µ–¥–∏—Ä–µ–∫—Ç: ${launchName} -> ${targetHtml}${q}`);
  } else {
    console.log(`‚ÑπÔ∏è  Launch-—Ä–µ–¥–∏—Ä–µ–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${launchName}`);
  }
}

// –ò—â–µ–º launch —Ñ–∞–π–ª—ã –∏ —Å–æ–∑–¥–∞—ë–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
const htmlFiles = fs.readdirSync(DIST_PATH).filter(f => f.endsWith('.html'));
const launchFiles = htmlFiles.filter(f => f.includes('launch'));
const indexFiles = htmlFiles.filter(f => f.includes('index') || f.includes('main'));

if (launchFiles.length > 0 && indexFiles.length > 0) {
  const launchFile = launchFiles[0];
  const targetFile = indexFiles[0];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç
  const launchPath = path.join(DIST_PATH, launchFile);
  const launchContent = fs.readFileSync(launchPath, 'utf8');
  
  if (launchContent.length < 1000 && !launchContent.includes('location.replace')) {
    console.log(`üîÑ –°–æ–∑–¥–∞—ë–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –¥–ª—è ${launchFile} -> ${targetFile}`);
    ensureLaunchRedirect({
      dist: DIST_PATH,
      launchName: launchFile,
      targetHtml: targetFile,
      query: `game=${gameName.replace('-offline', '')}&locale=en`
    });
  } else {
    console.log(`‚ÑπÔ∏è  Launch —Ñ–∞–π–ª ${launchFile} —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç –∏–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç`);
  }
} else {
  console.log('‚ÑπÔ∏è  Launch –∏–ª–∏ index —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
}

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ WS –º–æ–∫–æ–≤
console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket –º–æ–∫–æ–≤...');
const wsDir = path.join(DIST_PATH, 'mocks', 'ws');
if (!fs.existsSync(wsDir)) {
  console.log('üìÅ –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è WS –º–æ–∫–æ–≤');
  fs.mkdirSync(wsDir, { recursive: true });
}

// –°–æ–∑–¥–∞—ë–º fallback WS —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω–µ—Ç ndjson —Ñ–∞–π–ª–æ–≤
const wsFiles = fs.readdirSync(wsDir).filter(f => f.endsWith('.ndjson'));
if (wsFiles.length === 0) {
  console.log('üìù –°–æ–∑–¥–∞—ë–º fallback WS ndjson —Ñ–∞–π–ª');
  const fallbackWs = [
    JSON.stringify({type:'ServerTime', data:{ts:Date.now()}}),
    JSON.stringify({type:'GameState', data:{status:'IDLE', balance:100000}}),
    JSON.stringify({type:'RoundStart', data:{roundId:'offline-'+Date.now(), seed:'offline'}}),
    JSON.stringify({type:'Tick', data:{t:0, m:1.00}}),
    JSON.stringify({type:'Crash', data:{m:1.23}})
  ].join('\n');
  const fallbackFile = path.join(wsDir, 'fallback.ndjson');
  fs.writeFileSync(fallbackFile, fallbackWs);
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω fallback WS —Ñ–∞–π–ª');
} else {
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${wsFiles.length} WS ndjson —Ñ–∞–π–ª–æ–≤`);
}

// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ API –º–æ–∫–æ–≤
console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ API –º–æ–∫–æ–≤...');
const mocksDir = path.join(DIST_PATH, 'mocks');
if (!fs.existsSync(mocksDir)) {
  console.log('üìÅ –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è API –º–æ–∫–æ–≤');
  fs.mkdirSync(mocksDir, { recursive: true });
}

const apiMapFile = path.join(mocksDir, 'apiMap.json');
if (!fs.existsSync(apiMapFile)) {
  console.log('üìù –°–æ–∑–¥–∞—ë–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è apiMap.json');
  const fallbackApiMap = {
    "GET|/api/demo/launch|game=" + gameName.replace('-offline', '') + "&locale=en|-": {
      "file": "./api/launch_demo.json",
      "description": "Demo launch endpoint"
    }
  };
  fs.writeFileSync(apiMapFile, JSON.stringify(fallbackApiMap, null, 2));
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω fallback API map');
} else {
  console.log('‚úÖ API map –Ω–∞–π–¥–µ–Ω');
}

// 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ runtime —Ñ–∞–π–ª–∞
console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ runtime —Ñ–∞–π–ª–∞...');
const runtimeFile = path.join(DIST_PATH, 'runtime', 'offline.js');
if (!fs.existsSync(runtimeFile)) {
  console.log('‚ö†Ô∏è  Runtime —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ —à–∞–±–ª–æ–Ω–∞');
  const runtimeDir = path.dirname(runtimeFile);
  if (!fs.existsSync(runtimeDir)) {
    fs.mkdirSync(runtimeDir, { recursive: true });
  }
  
  // –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–π runtime —Ñ–∞–π–ª
  const basicRuntime = `/* Universal Offline Runtime */
console.log('[OFFLINE] Universal runtime loaded for ${gameName}');

// Universal Bootstrap shim for common game objects
(function(){
  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –¥–ª—è ingenuity.* –æ–±—ä–µ–∫—Ç–æ–≤ (TopSpin –∏–≥—Ä—ã)
  window.ingenuity = window.ingenuity || {};
  const sm = window.ingenuity.soundManager = window.ingenuity.soundManager || {};
  ["muteAllSounds","playSound","stopAll","setVolume"].forEach(k=>{
    if (typeof sm[k] !== "function") sm[k] = function(){};
  });
  
  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
  window.gameConfig = window.gameConfig || {};
  window.gameState = window.gameState || {};
  window.soundManager = window.soundManager || sm;
  
  console.log('[OFFLINE] Universal bootstrap shim initialized');
})();

// PixiJS + GSAP null-guards
(function(){
  if (window.PIXI?.utils?.from) {
    const orig = window.PIXI.utils.from;
    window.PIXI.utils.from = function(src){ if (src==null) return window.PIXI.Texture.EMPTY; return orig.apply(this, arguments); };
  }
  if (window.gsap) {
    const oTo = window.gsap.to;
    window.gsap.to = function(targets, vars){
      const safe = Array.isArray(targets) ? targets.filter(Boolean) : (targets?targets:[]);
      return oTo.call(this, safe, vars);
    };
  }
  console.log('[OFFLINE] PixiJS + GSAP null-guards initialized');
})();

// Universal WebSocket shim
(function () {
  const NativeWS = window.WebSocket;
  if (!NativeWS) return;
  
  window.WebSocket = new Proxy(NativeWS, { 
    construct(target, args) { 
      const url = String(args[0] || '');
      if (/wss?:\\/\\//i.test(url)) {
        console.log('[OFFLINE] Intercepting WebSocket:', url);
        // –°–æ–∑–¥–∞—ë–º —Ñ–µ–π–∫–æ–≤—ã–π WebSocket
        const fake = {
          url, readyState: 1,
          send(data){ console.log('[OFFLINE][WS] send:', data); },
          close(){ console.log('[OFFLINE][WS] closed'); },
          addEventListener(){},
          removeEventListener(){},
          set onopen(fn){ setTimeout(() => fn({type:'open'}), 100); },
          set onmessage(fn){ setTimeout(() => fn({data:'{"type":"ping"}'}), 200); },
          set onclose(fn){},
          set onerror(fn){}
        };
        return fake;
      }
      return new target(...args);
    }
  });
})();

console.log('[OFFLINE] Universal runtime ready');
`;
  
  fs.writeFileSync(runtimeFile, basicRuntime);
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π runtime —Ñ–∞–π–ª');
} else {
  console.log('‚úÖ Runtime —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω');
}

// 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ Service Worker
console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Service Worker...');
const swFile = path.join(DIST_PATH, 'sw.js');
if (!fs.existsSync(swFile)) {
  console.log('‚ö†Ô∏è  Service Worker –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–π');
  const basicSW = `// Universal Service Worker
const CACHE_NAME = '${gameName}-offline-v1';

self.addEventListener('install', (event) => {
  console.log('[SW] Installing for ${gameName}...');
  self.skipWaiting();
});

self.addEventListener('activate', (event) => {
  console.log('[SW] Activating for ${gameName}...');
  event.waitUntil(self.clients.claim());
});

self.addEventListener('fetch', (event) => {
  // –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: —Å–Ω–∞—á–∞–ª–∞ –∫—ç—à, –ø–æ—Ç–æ–º —Å–µ—Ç—å
  event.respondWith(
    caches.match(event.request)
      .then(response => response || fetch(event.request))
  );
});
`;
  fs.writeFileSync(swFile, basicSW);
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π Service Worker');
} else {
  console.log('‚úÖ Service Worker –Ω–∞–π–¥–µ–Ω');
}

// 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–µ–π —Ñ–∞–π–ª–æ–≤
console.log('\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–µ–π —Ñ–∞–π–ª–æ–≤...');
const files = [];
function scanFiles(dir, baseDir = '') {
  const items = fs.readdirSync(dir);
  for (const item of items) {
    const fullPath = path.join(dir, item);
    const relPath = path.join(baseDir, item);
    if (fs.statSync(fullPath).isDirectory()) {
      scanFiles(fullPath, relPath);
    } else {
      const content = fs.readFileSync(fullPath);
      const hash = crypto.createHash('sha256').update(content).digest('hex');
      files.push({ path: relPath, hash, size: content.length });
    }
  }
}

scanFiles(DIST_PATH);

// –ò—â–µ–º –¥—É–±–ª–∏ –ø–æ —Ö—ç—à—É
const hashMap = new Map();
const duplicates = [];
for (const file of files) {
  if (hashMap.has(file.hash)) {
    duplicates.push({ original: hashMap.get(file.hash), duplicate: file });
  } else {
    hashMap.set(file.hash, file);
  }
}

if (duplicates.length > 0) {
  console.log(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${duplicates.length} –¥—É–±–ª–µ–π —Ñ–∞–π–ª–æ–≤:`);
  duplicates.forEach(dup => {
    console.log(`  - ${dup.original.path} <-> ${dup.duplicate.path}`);
  });
} else {
  console.log('‚úÖ –î—É–±–ª–µ–π —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
}

// 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö URL
console.log('\n7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö URL...');
const externalUrls = [];
const textExts = ['.html', '.htm', '.js', '.mjs', '.css', '.json'];

function scanForExternals(dir, baseDir = '') {
  const items = fs.readdirSync(dir);
  for (const item of items) {
    const fullPath = path.join(dir, item);
    const relPath = path.join(baseDir, item);
    if (fs.statSync(fullPath).isDirectory()) {
      scanForExternals(fullPath, relPath);
    } else if (textExts.includes(path.extname(item).toLowerCase())) {
      const content = fs.readFileSync(fullPath, 'utf8');
      const matches = content.match(/https?:\/\/[^\s'")>]+/gi);
      if (matches) {
        externalUrls.push({ file: relPath, urls: matches });
      }
    }
  }
}

scanForExternals(DIST_PATH);

if (externalUrls.length > 0) {
  console.log(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${externalUrls.length} —Ñ–∞–π–ª–æ–≤ —Å –≤–Ω–µ—à–Ω–∏–º–∏ URL:`);
  externalUrls.slice(0, 5).forEach(item => {
    console.log(`  - ${item.file}: ${item.urls.length} URL`);
  });
} else {
  console.log('‚úÖ –í–Ω–µ—à–Ω–∏—Ö URL –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
}

// 8. –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
console.log('\n8Ô∏è‚É£ –ó–∞–ø—É—Å–∫ –ò–ò-–≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞...');
try {
  const validatorCmd = `python tools/ai_validator.py --dist ${DIST_PATH} --out reports/${gameName}-report.json --out-md reports/${gameName}-report.md`;
  console.log(`–í—ã–ø–æ–ª–Ω—è–µ–º: ${validatorCmd}`);
  execSync(validatorCmd, { stdio: 'inherit' });
  console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
} catch (error) {
  console.log('‚ö†Ô∏è  –í–∞–ª–∏–¥–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)');
}

// 9. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
console.log('\nüéØ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç');
console.log('==================');
console.log(`‚úÖ –ò–≥—Ä–∞: ${gameName}`);
console.log(`‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${DIST_PATH}`);
console.log(`‚úÖ –§–∞–π–ª–æ–≤ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${files.length}`);
console.log(`‚úÖ –î—É–±–ª–µ–π –Ω–∞–π–¥–µ–Ω–æ: ${duplicates.length}`);
console.log(`‚úÖ –§–∞–π–ª–æ–≤ —Å –≤–Ω–µ—à–Ω–∏–º–∏ URL: ${externalUrls.length}`);
console.log(`‚úÖ WS –º–æ–∫–∏: ${wsFiles.length > 0 ? '‚úÖ' : '‚ùå'}`);
console.log(`‚úÖ API –º–æ–∫–∏: ${fs.existsSync(apiMapFile) ? '‚úÖ' : '‚ùå'}`);
console.log(`‚úÖ Runtime: ${fs.existsSync(runtimeFile) ? '‚úÖ' : '‚ùå'}`);
console.log(`‚úÖ Service Worker: ${fs.existsSync(swFile) ? '‚úÖ' : '‚ùå'}`);

console.log('\nüöÄ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å:');
console.log(`   npm run serve -- ${gameName}`);
console.log(`   npm run validate -- ${gameName}`);

console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
console.log(`1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: npm run serve -- ${gameName}`);
console.log('2. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8080 –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –Ω–∞ –æ—à–∏–±–∫–∏');
console.log(`4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä: npm run validate -- ${gameName}`);
console.log(`5. –ò–∑—É—á–∏—Ç–µ –æ—Ç—á—ë—Ç –≤ reports/${gameName}-report.md`);
